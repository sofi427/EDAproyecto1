package proyecto1;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
    	Teclado teclado = new Teclado();
    	String comando;
    	
    	System.out.println("===Consola de comandos===");
    	System.out.println("Escribir salir para terminar");
    	
    	while(true) {
    		System.out.println("> ");
    		comando = teclado.getScanner().nextLine().trim();
    		
    		if (comando.equals("salir")) {
    			System.out.println("Saliendo del programa...");
    			break;
    		}
    		switch(comando) {
    		case "comandos":
    			System.out.println("Estos son los comandos que reconoce la consola: ");
    			System.out.println("M칠todo publicacinesOrdenadas() (clase repositorio) == publicacionesOrdenadas ");
    			System.out.println("Metodo buscarPublicacion(String pId) (clase repositorio) == buscarPublicacion");
    			break;
    		case "publicacionesOrdenadas": 
    			testListaVacia();
    			testUnaPublicacion();
    			testDosPublicacionesOrdenadas();
    			testDosPublicacionesDesordenadas();
    			break;
    			
    		case "publicacionesCitadas":
    			testPublicacionesSinCitas();
    			testUnaCita();
    			testVariasCitas();
    			break;
    			
    		case "buscarPublicacion":
    			testNoHayPublicaciones();
    			testSoloEstaLaPublicacion();
    			testPublicacionEnElMedio();
    			testPublicacionAlFinal();
    			testNoEst치LaPublicacion();
    			break;
    			
    		case "listaAutores":
    			testPublicacionConAutores();
    			testPublicacionSinAutores();
    			testPublicacionInexistente();
    			break;

            case "CrearRepositorioDesdeFicheros":
    			testRepositorioDesdeFicheros();
    			break;
    			
    		}	
    	}
    }
    
    
    // M칠todos de prueba de listaAutores
    
    private static void testPublicacionInexistente() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	
    	HashMap<String, Autor> autores = repositorio.getListaAutores("3");
    	
    	System.out.println("n游댳 Test 3: Publicaci칩n inexistente");
    	System.out.println("Esperando true");
    	System.out.println("Resultado: " + (autores == null));
    }
    
    private static void testPublicacionConAutores() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	repositorio.anadirPublicacion("1", "A");
    	repositorio.anadirAutor("1", "11", "Naroa");
    	repositorio.anadirAutor("1", "12", "Sof칤a");

    	HashMap<String, Autor> autores = repositorio.getListaAutores("1");

        System.out.println("游댳 Test 1: Publicaci칩n con autores");
        System.out.println("Esperado: 2 autores");
        System.out.println("Resultado: " + autores.size());
        for (String id : autores.keySet()) {
            System.out.println("Autor: " + autores.get(id).getNombre());
        }
    }
        

    private static void testPublicacionSinAutores() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
        repositorio.anadirPublicacion("1", "A");

        HashMap<String, Autor> autores = repositorio.getListaAutores("1");

        System.out.println("\n游댳 Test 2: Publicaci칩n sin autores");
        System.out.println("Esperado: 0 autores");
        System.out.println("Resultado: " + autores.size());
    }


  
    
    // M칠todos de prueba de ListaPublicacionesCitadas
    
    private static void testPublicacionesSinCitas() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	repositorio.anadirPublicacion("1", "A");
    	repositorio.anadirPublicacion("2", "B");
    	repositorio.anadirPublicacion("3", "C");
    	System.out.println("Deber치 de devolver 0 puesto que no se ha a침adido ninguna cita a ninguna publicacion: " + repositorio.getListaPublicacionesCitadas("2").size());
    }
    
    private static void testUnaCita() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	repositorio.anadirPublicacion("1", "A");
    	repositorio.anadirPublicacion("2", "B");
    	repositorio.anadirPublicacion("3", "C");
    	Publicacion publi = new Publicacion("2", "B");
    	repositorio.buscarPublicaci칩n("2").anadirCita("4", publi);
    	System.out.println("Deber치 devolver 1 puesto que solo hay una cita a침adida: " + repositorio.getListaPublicacionesCitadas("2").size());
    }
    
    private static void testVariasCitas() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	repositorio.anadirPublicacion("1", "A");
    	repositorio.anadirPublicacion("2", "B");
    	repositorio.anadirPublicacion("3", "C");
    	Publicacion publi = new Publicacion("2", "B");
    	repositorio.buscarPublicaci칩n("2").anadirCita("4", publi);
    	Publicacion publi2 = new Publicacion("3", "C");
    	repositorio.buscarPublicaci칩n("2").anadirCita("5", publi2);
    	System.out.println("Deber치 devolver 2 puesto que solo hay varias citas a침adidas: " + repositorio.getListaPublicacionesCitadas("2").size());
    }
    
    // M칠todos de prueba de buscarPublicacion
    
    private static void testNoHayPublicaciones() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	Publicacion publicacion = new Publicacion("1", "A");
    	System.out.println("El resultado debe de ser null y es: " +  repositorio.buscarPublicaci칩n(publicacion.getId()));
    }
    
    private static void testSoloEstaLaPublicacion() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	repositorio.anadirPublicacion("1", "A");
    	Publicacion publicacionABuscar = repositorio.buscarPublicaci칩n("1");
    	System.out.println("El resultado debe ser el de una publicaci칩n con ID = 1 y es: " + publicacionABuscar.getId());
    }
    
    private static void testNoEst치LaPublicacion() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	repositorio.anadirPublicacion("1", "A");
    	repositorio.anadirPublicacion("2", "B");
    	repositorio.anadirPublicacion("3", "C");
    	System.out.println("El resultado deber칤a ser null puesto que la publicacion no est치 y es: " + repositorio.buscarPublicaci칩n("4"));

    }
    
    private static void testPublicacionEnElMedio() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	repositorio.anadirPublicacion("1", "A");
    	repositorio.anadirPublicacion("2", "B");
    	repositorio.anadirPublicacion("3", "C");
    	System.out.println("El resultado deber칤a ser 2 B puesto que la publicacion no est치 y es: ID:  " + repositorio.buscarPublicaci칩n("2").getId() + " T칤tulo: " + repositorio.buscarPublicaci칩n("2").getTitulo());
    }
    
    private static void testPublicacionAlFinal() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	repositorio.anadirPublicacion("1", "A");
    	repositorio.anadirPublicacion("2", "B");
    	repositorio.anadirPublicacion("3", "C");
    	System.out.println("El resultado deber칤a ser 3 C puesto que la publicaci칩n est치 al final y es: ID: " + repositorio.buscarPublicaci칩n("3").getId() + " T칤tulo: " + repositorio.buscarPublicaci칩n("3").getTitulo());
    }
    
    // Casos de prueba del m칠todo publicacionesOrdenadas
    private static void testListaVacia() { // Es static para poder ejecutarlo desde main
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
        HashMap<String, Publicacion> resultado = repositorio.getPublicacionesOrdenadas();
        System.out.println("Test lista vac칤a: " + (resultado.isEmpty() ? "OK" : "FALL칍"));
    }
    
    private static void testUnaPublicacion() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	repositorio.anadirPublicacion("1", "A");
    	HashMap<String, Publicacion> resultado = repositorio.getPublicacionesOrdenadas();
    	for(String clave : resultado.keySet()) {
        	Publicacion res = resultado.get(clave);
        	String tit = res.getTitulo();
    		System.out.println("ID: " + res.getId() + "  T칤tulo: " + tit);
    	}
    }
    
    private static void testDosPublicacionesOrdenadas() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	repositorio.anadirPublicacion("1", "A");
        repositorio.anadirPublicacion("2", "B");
        HashMap<String, Publicacion> resultado = repositorio.getPublicacionesOrdenadas();
        System.out.println("Test publicaciones ordenadas");
        System.out.println();
        for(String clave : resultado.keySet()) {
        	Publicacion res = resultado.get(clave);
        	String tit = res.getTitulo();
    		System.out.println("ID: " + res.getId() + "  T칤tulo: " + tit);
        }
    }
    
    private static void testDosPublicacionesDesordenadas() {
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	repositorio.anadirPublicacion("1", "B");
        repositorio.anadirPublicacion("2", "A");
        HashMap<String, Publicacion> resultado = repositorio.getPublicacionesOrdenadas();
        System.out.println("Test publicaciones desordenadas");
        System.out.println();
        for(String clave : resultado.keySet()) {
        	Publicacion res = resultado.get(clave);
        	String tit = res.getTitulo();
    		System.out.println("ID: " + res.getId() + "  T칤tulo: " + tit);
        }
    }

    private static void testRepositorioDesdeFicheros() {
    	LectorFichero lector = LectorFichero.getLector();
    	RepositorioPublicaciones repositorio = new RepositorioPublicaciones();
    	//primero se a침aden las publicaciones al repositorio con su t칤tulo
    	HashMap<String, String> pubYTitulo = lector.leerPublicacionesYTitulos("publications-titles-all.txt");
    	for (Map.Entry<String, String> i1 : pubYTitulo.entrySet()) {
    	    String id = i1.getKey();
    	    String titulo = i1.getValue();
    	    repositorio.anadirPublicacion(id, titulo);
    	}
    	
    	//se a침ade a cada publicaci칩n los autores que le pertenecen a su lista y sus nombres
    	HashMap<String, ArrayList<String>> pubYAutores = lector.leerPublicacionesYAutores("publications-authors-all-final.txt");    
    	HashMap<String, String> autorYNom = lector.leerAutoresYNombres("authors-names-all.txt");
    	for(Map.Entry<String, ArrayList<String>> i2 : pubYAutores.entrySet()) {
    		String idPublicacion = i2.getKey();
    		ArrayList<String> listaAutores = i2.getValue();

    		for (String idAutor : listaAutores) {
    			String nombreAutor = autorYNom.get(idAutor);
    			if (nombreAutor == null) {
    				nombreAutor = "Autor desconocido";
    			}
    		repositorio.anadirAutor(idPublicacion, idAutor, nombreAutor);
    	}
    		
    	//se a침ade a la lista de citas de cada publicaci칩n las citas leidas del fichero
    	HashMap<String, ArrayList<String>> pubYCitas = lector.leerPublicacionesYCitas("publications-citedPubs-all.txt");

    	for (Map.Entry<String, ArrayList<String>> i3 : pubYCitas.entrySet()) {
    	    String idPub = i3.getKey();
    	    ArrayList<String> listaCitas = i3.getValue();

    	    for (String idCita : listaCitas) {
    	        Publicacion publicacionCitada = repositorio.buscarPublicaci칩n(idCita);
    	        if (publicacionCitada != null) {
    	            repositorio.anadirCita(idPub, idCita, publicacionCitada);
    	        }
    	    }
    	}
    	System.out.println("Se han cargado correctamente los datos de los ficheros en el repositorio, se mostrar치 el resultado en un fichero.");
    	repositorio.actualizarFicheros("Repositorio-datos-ficheros.txt");
    }
   }

}
